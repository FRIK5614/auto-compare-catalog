
import { useState, useEffect, useRef } from "react";
import { Car, Order } from "@/types/car";
import { useToast } from "@/hooks/use-toast";
import { loadCars, loadFavorites, loadOrders } from "../dataLoaders";

export const useCarsData = () => {
  const [cars, setCars] = useState<Car[]>([]);
  const [orders, setOrders] = useState<Order[]>([]);
  const [favorites, setFavorites] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>("");
  const { toast } = useToast();
  const dataInitialized = useRef(false);
  const reloadInProgress = useRef(false);
  const lastReloadTime = useRef(0);
  const RELOAD_COOLDOWN = 2000; // 2 seconds cooldown between reloads

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    if (dataInitialized.current) return;
    dataInitialized.current = true;
    
    const initializeData = async () => {
      try {
        setLoading(true);
        setError("");
        
        console.log("üîÑ Initializing cars data - FIRST LOAD");
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        const carsData = await loadCars();
        setCars(carsData);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
        const ordersData = await loadOrders();
        setOrders(ordersData);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        const favoritesData = await loadFavorites();
        setFavorites(favoritesData);
        
        setLoading(false);
        lastReloadTime.current = Date.now();
        
        // Silent notification for initial load
        if (carsData.length === 0) {
          toast({
            variant: "destructive",
            title: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞",
            description: "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
          });
        }
      } catch (err) {
        console.error("Failed to initialize data:", err);
        const errorMessage = err instanceof Error ? err.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ";
        setError(errorMessage);
        setLoading(false);
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
          description: errorMessage
        });
      }
    };

    initializeData();
  }, [toast]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞
  const reloadCars = async (): Promise<void> => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ cooldown –ø–µ—Ä–∏–æ–¥
    const now = Date.now();
    const timeSinceLastReload = now - lastReloadTime.current;
    
    if (timeSinceLastReload < RELOAD_COOLDOWN) {
      console.log(`‚è±Ô∏è Reload requested too soon (${timeSinceLastReload}ms since last reload)`);
      return;
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã reloadCars
    if (reloadInProgress.current) {
      console.log("üîÑ Reload already in progress, skipping");
      toast({
        title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
        description: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
      });
      return;
    }
    
    reloadInProgress.current = true;
    lastReloadTime.current = now;
    
    try {
      setLoading(true);
      setError("");
      console.log("üîÑ Starting cars data reload");
      
      const data = await loadCars();
      setCars(data);
      
      if (data.length === 0) {
        toast({
          variant: "destructive",
          title: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞",
          description: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        });
      } else {
        toast({
          title: "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
          description: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`
        });
      }
      
      setLoading(false);
      console.log("‚úÖ Cars data reload complete");
    } catch (err) {
      console.error("Failed to reload cars:", err);
      const errorMessage = err instanceof Error ? err.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ";
      setError(errorMessage);
      setLoading(false);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        description: errorMessage
      });
    } finally {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º —Ñ–ª–∞–≥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –±—ã—Å—Ç—Ä—ã–º–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞–∂–∞—Ç–∏—è–º–∏
      setTimeout(() => {
        reloadInProgress.current = false;
      }, 300);
    }
  };

  return {
    cars,
    setCars,
    orders,
    setOrders,
    favorites,
    setFavorites,
    loading,
    error,
    reloadCars
  };
};
