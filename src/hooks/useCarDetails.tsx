
import { useCars as useGlobalCars } from "../contexts/CarsContext";
import { Car } from "@/types/car";
import { useEffect, useRef } from "react";

export const useCarDetails = () => {
  const {
    cars,
    getCarById,
    reloadCars,
    viewCar,
    deleteCar,
    updateCar,
    addCar,
    uploadCarImage,
    loading,
    error
  } = useGlobalCars();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
  const initialLoadDone = useRef(false);
  const initialLoadStarted = useRef(false);
  const initialLoadTimeout = useRef<NodeJS.Timeout | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  useEffect(() => {
    if (!initialLoadDone.current && !initialLoadStarted.current && cars.length === 0 && !loading && !error) {
      initialLoadStarted.current = true;
      
      // Add a small delay to prevent multiple rapid reload calls
      initialLoadTimeout.current = setTimeout(() => {
        console.log("üîÑ Initial car data load from useCarDetails");
        reloadCars().then(() => {
          initialLoadDone.current = true;
          
          // Log info about loaded cars after successful load
          if (cars.length > 0) {
            console.log("====== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï –î–ê–ù–ù–´–• –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô ======");
            console.log(`–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –±–∞–∑–µ: ${cars.length}`);
            
            // Group by brands for more detailed analysis
            const brandCounts = cars.reduce((acc, car) => {
              acc[car.brand] = (acc[car.brand] || 0) + 1;
              return acc;
            }, {} as Record<string, number>);
            
            console.log("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±—Ä–µ–Ω–¥–∞–º:");
            Object.entries(brandCounts)
              .sort(([, countA], [, countB]) => countB - countA)
              .forEach(([brand, count]) => {
                console.log(`- ${brand}: ${count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`);
              });
            
            // Group by countries
            const countryCounts = cars.reduce((acc, car) => {
              const country = car.country || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
              acc[country] = (acc[country] || 0) + 1;
              return acc;
            }, {} as Record<string, number>);
            
            console.log("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:");
            Object.entries(countryCounts)
              .sort(([, countA], [, countB]) => countB - countA)
              .forEach(([country, count]) => {
                console.log(`- ${country}: ${count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`);
              });
            
            console.log("============================================");
          }
        }).catch(err => {
          console.error("Error loading cars:", err);
          initialLoadDone.current = true;
        });
      }, 500);
    } else if (cars.length > 0) {
      initialLoadDone.current = true;
    }
    
    // Cleanup timeout on unmount
    return () => {
      if (initialLoadTimeout.current) {
        clearTimeout(initialLoadTimeout.current);
      }
    };
  }, [cars.length, reloadCars, loading, error]);

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è getCarById —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∏—Å–ª–æ–≤—ã—Ö –∏ UUID –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
  const enhancedGetCarById = (id: string) => {
    if (!id) return undefined;
    
    console.log('Looking for car with ID:', id);
    console.log('Available cars:', cars.length);
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é ID (UUID)
    let car = cars.find(car => car.id === id);
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏ ID –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –º–∞—Å—Å–∏–≤–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∏–Ω–¥–µ–∫—Å–æ–º
    if (!car && /^\d+$/.test(id)) {
      const index = parseInt(id) - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ (0-based)
      if (index >= 0 && index < cars.length) {
        car = cars[index];
      }
    }
    
    console.log('Found car:', car ? 'Yes' : 'No');
    return car;
  };

  return {
    cars,
    loading,
    error,
    getCarById: enhancedGetCarById,
    viewCar,
    deleteCar,
    updateCar,
    addCar,
    uploadCarImage,
    reloadCars
  };
};
